#!/usr/bin/env node

var pkg = require('./../package');
var program = require('commander');
var slackin = require('./../node').default;

program
.version(pkg.version)
.usage('[options] <team-id> <api-token> <segment-key>')
.option('-p, --port <port>', 'Port to listen on [$PORT or 3000]', require('hostenv').PORT || process.env.PORT || 3000)
.option('-h, --hostname <hostname>', 'Hostname to listen on [$HOSTNAME or 0.0.0.0]', require('hostenv').HOSTNAME || process.env.WEBSITE_HOSTNAME || '0.0.0.0')
.option('-c, --channels [<chan>]', 'One or more comma-separated channel names to allow single-channel guests [$SLACK_CHANNELS]', process.env.SLACK_CHANNELS)
.option('-c, --channel <chan>', 'Single channel guest invite (deprecated) [$SLACK_CHANNEL]', process.env.SLACK_CHANNEL)
.option('-i, --interval <int>', 'How frequently (ms) to poll Slack [$SLACK_INTERVAL or 5000]', process.env.SLACK_INTERVAL || 5000)
.option('-P, --path <path>', 'Path to serve slackin under', '/')
.option('-s, --silent', 'Do not print out warns or errors')
.option('-C, --coc <coc>', 'Full URL to a CoC that needs to be agreed to')
.option('-c, --css <file>', 'Full URL to a custom CSS file to use on the main page')
.parse(process.argv);

var org = program.args[0] || process.env.SLACK_SUBDOMAIN;
var token = program.args[1] || process.env.SLACK_API_TOKEN;
var segment = program.args[2] || process.env.SLACK_SEGMENT_KEY;

if (!org || !token || !segment) {
  program.help();
} else {
  program.org = org;
  program.token = token;
  program.segment = segment;
}

// support deprecated option
if (!program.channels && program.channel) {
  program.channels = program.channel;
}

var port = program.port;
var hostname = program.hostname;
slackin(program).listen(port, hostname, function(err){
  if (err) throw err;
  if (!program.silent) console.log('%s â€“ listening on %s:%d', new Date, hostname, port);
});
